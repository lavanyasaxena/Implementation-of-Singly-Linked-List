{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b1c0f6a1-7140-449c-80a6-4494f241cfa5",
   "metadata": {},
   "source": [
    "#### Week 2 Problem:\n",
    "Create a Python program that implements a singly linked list using Object-Oriented Programming (OOP) principles. Your implementation should include the following: A Node class to represent each node in the list. A LinkedList class to manage the nodes, with methods to: Add a node to the end of the list Print the list Delete the nth node (where n is a 1-based index) Include exception handling to manage edge cases such as: Deleting a node from an empty list Deleting a node with an index out of range Test your implementation with at least one sample list.\r\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6620b440-9b66-4caa-aa41-ce64e0ea7a3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List before deletion:1 -> 2 -> 3 -> 4 -> \n",
      "List after first deletion:1 -> 2 -> 4 -> \n",
      "List after second deletion:1 -> 4 -> \n",
      "List after third deletion:4 -> \n"
     ]
    }
   ],
   "source": [
    "# Node Class: Holds every node in a list\n",
    "class Node:\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "# Linked List Class: Stores the nodes\n",
    "class LinkedList:\n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "        \n",
    "# Insertion: Add Nodes to the end of the list\n",
    "    def insertion(self, data):\n",
    "        newNode = Node(data)\n",
    "        if self.head is None:\n",
    "            self.head = newNode\n",
    "            return\n",
    "        lastNode = self.head\n",
    "        while lastNode.next:\n",
    "            lastNode = lastNode.next\n",
    "        lastNode.next = newNode\n",
    "\n",
    "# Print Linked List\n",
    "    def print_linked_list(self):\n",
    "        current = self.head\n",
    "        while current:\n",
    "            print(current.data, end=\" -> \")\n",
    "            current = current.next\n",
    "        print()\n",
    "\n",
    "# Deletion: Deletes nth node from the list which is a 1-based index\n",
    "    def deletion(self, n):\n",
    "        if self.head is None:\n",
    "            raise IndexError(\"List is empty!\")\n",
    "        if n < 1:\n",
    "            raise IndexError(\"The number is negative. Change it to positive number and try again!\")\n",
    "\n",
    "        if n == 1:\n",
    "            self.head = self.head.next\n",
    "            return\n",
    "\n",
    "        current = self.head\n",
    "        prev = None\n",
    "        count = 1\n",
    "        while current and count < n:\n",
    "            prev = current\n",
    "            current = current.next\n",
    "            count += 1\n",
    "\n",
    "        if current is None:\n",
    "            raise IndexError(\"Out of range.\")\n",
    "\n",
    "        prev.next = current.next\n",
    "\n",
    "# Example: linked List such as.. 1->2->3->4\n",
    "head = LinkedList()\n",
    "head.insertion(1)\n",
    "head.insertion(2)\n",
    "head.insertion(3)\n",
    "head.insertion(4)\n",
    "\n",
    "print(\"List before deletion:\", end=\"\")\n",
    "head.print_linked_list()\n",
    "\n",
    "# Exception Handling Cases: Deleting a node from an empty list and Deleting a node with an index out of range\n",
    "try:\n",
    "    head.deletion(3)\n",
    "    print(\"List after first deletion:\", end=\"\")\n",
    "    head.print_linked_list()\n",
    "\n",
    "    head.deletion(2)\n",
    "    print(\"List after second deletion:\", end=\"\")\n",
    "    head.print_linked_list()\n",
    "\n",
    "    head.deletion(1)\n",
    "    print(\"List after third deletion:\", end=\"\")\n",
    "    head.print_linked_list()\n",
    "except IndexError as e:\n",
    "    print(f\"Error: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e665b3c4-fad2-46d1-8460-252d1207ff3e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
